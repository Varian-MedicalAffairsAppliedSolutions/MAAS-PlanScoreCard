using Newtonsoft.Json;
using PlanScoreCard.Events.HelperWindows;
using PlanScoreCard.Models.ModelHelpers;
using PlanScoreCard.Services;
using PlanScoreCard.ViewModels.VMHelpers;
using PlanScoreCard.Views.HelperWindows;
using Prism.Commands;
using Prism.Events;
using Prism.Mvvm;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace PlanScoreCard.Models
{
    public class StructureModel : BindableBase, INotifyPropertyChanged
    {

        private string structureId;

        public string StructureId
        {
            get { return structureId; }
            set
            {
                structureId = value;

                //if(String.IsNullOrWhiteSpace(structureId))
                //    TemplateStructureId = structureId;

                NotifyPropertyChanged();
            }
        }

        private string structureComment;

        public string StructureComment
        {
            get { return structureComment; }
            set
            {
                structureComment = value;
                NotifyPropertyChanged();
            }
        }

        private string templateStructureId;

        public string TemplateStructureId
        {
            get { return templateStructureId; }
            set
            {
                templateStructureId = value;
                NotifyPropertyChanged();
            }
        }

        public string StructureCode { get; set; }
        public bool AutoGenerated { get; set; }
        #region structure validation
        private bool _bValidStructure;
        [JsonIgnore]
        public bool bValidStructure
        {
            get { return _bValidStructure; }
            set { SetProperty(ref _bValidStructure, value); }
        }
        private bool _bStructureMatch;
        [JsonIgnore]
        public bool bStructureMatch
        {
            get { return _bStructureMatch; }
            set { SetProperty(ref _bStructureMatch, value); }
        }
        private bool _bDictionaryMatch;
        [JsonIgnore]
        public bool bDictionaryMatch
        {
            get { return _bDictionaryMatch; }
            set { SetProperty(ref _bDictionaryMatch, value); }
        }
        private bool _bLocalMatch;
        [JsonIgnore]
        public bool bLocalMatch
        {
            get { return _bLocalMatch; }
            set { SetProperty(ref _bLocalMatch, value); }
        }

        private IEventAggregator _eventAggregator;

        [JsonIgnore]
        public ObservableCollection<StructureModel> PlanStructureMatches { get; private set; }
        [JsonIgnore]
        private StructureMatchingView StructureMatchingView;

        private StructureModel _matchedStructure;

        [JsonIgnore]
        public StructureModel MatchedStructure
        {
            get { return _matchedStructure; }
            set
            {
                SetProperty(ref _matchedStructure, value);
                if (MatchedStructure != null)
                {
                    bValidStructure = true;
                    bLocalMatch = true;
                    bStructureMatch = true;
                    _eventAggregator.GetEvent<UpdateSelectedPlanEvent>().Publish(this);
                }
            }
        }
        [JsonIgnore]
        public DelegateCommand LaunchStructureMatchCommand { get; private set; }
        private int _templateStructureInt;
        [JsonIgnore]
        public int TemplateStructureInt
        {
            get { return _templateStructureInt; }
            set { SetProperty(ref _templateStructureInt, value); }
        }
        [JsonIgnore]
        public DelegateCommand AddMatchListCommand { get; private set; }
        [JsonIgnore]
        public DelegateCommand AddDictionaryCommand { get; private set; }
        #endregion
        public StructureModel(IEventAggregator eventAggregator)
        {
            _eventAggregator = eventAggregator;
            PlanStructureMatches = new ObservableCollection<StructureModel>();
            LaunchStructureMatchCommand = new DelegateCommand(OnLaunchStructureMatch);
            AddMatchListCommand = new DelegateCommand(OnAddMatchList);
            AddDictionaryCommand = new DelegateCommand(OnAddDictionary);
        }

        private void OnAddDictionary()
        {
            StructureDictionaryService localStructureDictionary = new StructureDictionaryService();
            var localStructureModel = localStructureDictionary.StructureDictionary.FirstOrDefault(sd => sd.StructureID.Equals(StructureId, StringComparison.OrdinalIgnoreCase));
            if (localStructureModel == null)
            {
                localStructureDictionary.AddStructure(StructureId);
            }
            localStructureDictionary.AddSynonym(StructureId, MatchedStructure.StructureId);
            _eventAggregator.GetEvent<EvaluateStructureMatchesEvent>().Publish();
        }

        private void OnAddMatchList()
        {
            _eventAggregator.GetEvent<UpdateTemplateMatchesEvent>().Publish(this);
        }

        private void OnLaunchStructureMatch()
        {
            StructureMatchingView = new StructureMatchingView();
            StructureMatchingView.DataContext = new StructureMatchingViewModel(this, PlanStructureMatches.ToList());
            StructureMatchingView.ShowDialog();
        }
        public void OnCloseStructureMatch()
        {
            if (StructureMatchingView != null)
            {
                StructureMatchingView.Close();
                StructureMatchingView = null;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        // This method is called by the Set accessor of each property.
        // The CallerMemberName attribute that is applied to the optional propertyName
        // parameter causes the property name of the caller to be substituted as an argument.
        private void NotifyPropertyChanged([CallerMemberName] String propertyName = "")
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        //Method used in patient selection process. Not used in general plan scoring. 
        public void EvaluateStructureMatch(List<StructureModel> planStructures)
        {
            foreach (var structure in planStructures)
            {
                PlanStructureMatches.Add(structure);
            }
           
            if (planStructures.Any(ss => ss.structureId.Equals(this.StructureId, StringComparison.OrdinalIgnoreCase)))
            {
                MatchedStructure = planStructures.FirstOrDefault(ss => ss.StructureId.Equals(this.StructureId, StringComparison.OrdinalIgnoreCase));
                bStructureMatch = true;
                bValidStructure = true;
                bLocalMatch = false;
                //return StructureMatchWarningModel.None;
                return;
            }
            if (MatchedStructure != null)
            {
                if (planStructures.Any(ss => ss.StructureId.Equals(this.MatchedStructure.StructureId, StringComparison.OrdinalIgnoreCase)))
                {
                    MatchedStructure = planStructures.FirstOrDefault(ss => ss.StructureId.Equals(this.MatchedStructure.structureId, StringComparison.OrdinalIgnoreCase));
                    bStructureMatch = true;
                    bLocalMatch = true;
                    bValidStructure = true;
                    return;
                }
            }
            //check dictionary if structure exists.
            StructureDictionaryService localStructureDictionary = new StructureDictionaryService();
            //foreach (var structure in planStructures)
            //{
            var structureEntry = localStructureDictionary.StructureDictionary.FirstOrDefault(sd => sd.StructureID.Equals(this.StructureId, StringComparison.OrdinalIgnoreCase));
            if (structureEntry != null && structureEntry.StructureSynonyms.Any())
            {
                foreach (var structure in planStructures)
                {
                    var localStructureMatch = localStructureDictionary.FindMatch(structure.StructureId);
                    if (!String.IsNullOrEmpty(localStructureMatch))
                    {
                        MatchedStructure = structure;
                        bValidStructure = true;
                        bDictionaryMatch = true;
                        bLocalMatch = false;
                        return;
                        //return StructureMatchWarningModel.Warning;
                    }
                }
            }
            // return StructureMatchWarningModel.Flag;
        }


    }
}
